package FinalVersion5.Graph;// Nick Dolan-Stern Comp 151 December 2013import java.util.Iterator;/** * An interface for a vertex in a graph. * * @author Frank M. Carrano * @version 11/26/2013 */public interface VertexInterface<T> {    /**     * Gets this vertex's label.     *     * @return the object that labels the vertex     */    public T getLabel();    /**     * Marks this vertex as visited.     */    public boolean isVisited();    /**     * Connects this vertex and a given vertex with an unweighted     * edge. The two vertices cannot be the same, and must not     * already have this edge between them. In a directed graph,     * the edge points toward the given vertex.     *     * @param endVertex a vertex in the graph that ends the edge     * @return true if the edge is added, or false if not     */    public void connect(VertexInterface<T> endVertex);    /**     * Creates an iterator of this vertex's neighbors by following     * all edges that begin at this vertex.     *     * @return an iterator of the neighboring vertices of this vertex     */    public Iterator<VertexInterface<T>> getNeighborIterator();    /**     * Creates an iterator of the weights of the edges to this     * vertex's neighbors.     *     * @return an iterator of edge weights for edges to neighbors of this     * vertex     */    public VertexInterface<T> getUnvisitedNeighbor();    public int getNumberOfEdges();}