package FinalVersion5.Graph;// Nick Dolan-Stern Comp 151 December 2013import java.util.Iterator;import java.util.LinkedList;import java.util.List;// Nick Dolan-Stern Comp 151 December 2013/** * A class that represents a vertex in a graph. * * @author Frank M. Carrano * @version 11/26/2013 * @modified By Anna Bieszczad */public class Vertex<T> implements VertexInterface<T> {    private final T label;    private final List<Edge> edgeList; // edges to neighbors    private final boolean visited;                          // true if visited    public Vertex(T vertexLabel) {        this.label = vertexLabel;        this.edgeList = new LinkedList<>();        this.visited = false;    } // end constructor    public T getLabel() {        return this.label;    } // end getLabel    public void connect(VertexInterface<T> endVertex) {        this.edgeList.add(new Edge(endVertex));    } // end connect    public Iterator<VertexInterface<T>> getNeighborIterator() {        return new NeighborIterator(edgeList);    } // end getNeighborIterator    public VertexInterface<T> getUnvisitedNeighbor() {        VertexInterface<T> result = null;        Iterator<VertexInterface<T>> neighbors = getNeighborIterator();        while (neighbors.hasNext() && (result == null)) {            VertexInterface<T> nextNeighbor = neighbors.next();            if (!nextNeighbor.isVisited())                result = nextNeighbor;        } // end while        return result;    } // end getUnvisitedNeighbor    public boolean isVisited() {        return this.visited;    } // end isVisited    public boolean equals(Object other) {        boolean result;        if ((other == null) || (getClass() != other.getClass()))            result = false;        else {            // the cast is safe because other has the same type as this object            @SuppressWarnings("unchecked")            Vertex<T> otherVertex = (Vertex<T>) other;            result = this.label.equals(otherVertex.label);        } // end if        return result;    } // end equals    public String toString() {        return this.label.toString();    } // end toString    public void display() // for testing    {        System.out.print(this.label + " -> ");        Iterator<VertexInterface<T>> vertexIterator = getNeighborIterator();        while (vertexIterator.hasNext()) {            Vertex<T> vertex = (Vertex<T>) vertexIterator.next();            System.out.print(vertex);            if (vertexIterator.hasNext()) {                System.out.print(" -> ");            }        } // end while        System.out.println();    } // end display    public int getNumberOfEdges()    {        return this.edgeList.size();    }}